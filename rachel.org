#+TITLE: Python for early children

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.9.0

#+REVEAL_EXTERNAL_PLUGIN: ( chalkboard menu )
# #+REVEAL_EXTRA_CSS: ./mystyle.css
#+ATTR_ORG: :width 200/250/300/400/500/600
#+ATTR_LATEX: :width 2.0in
#+ATTR_HTML: :width 200/250/300/400/500/600px
#+REVEAL_TITLE_SLIDE: <h2>%t</h2><h3>%s</h3><p>%A %a</p><p><a href="%u">%u</a></p>
#+REVEAL_THEME: moon
# ./assets/stars.jpg
#+REVEAL_TITLE_SLIDE_BACKGROUND: https://images.freeimages.com/images/large-previews/f0d/night-sky-1401615.jpg
#+Subtitle: Getting started
#+Author: laurent
#+Email: laurent_pinson@hotmail.com
#+REVEAL_TALK_URL: https://laurenthyz.github.io/rachel/index.html


# * Lesson 1
# ,/Pictures/
# Welcome to Python 101, and congratulations on learning coding that early in life!
# #+BEGIN_EXPORT html
# <iframe src="https://giphy.com/embed/11ISwbgCxEzMyY" width="480" height="360" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
# #+END_EXPORT


# ** White-board 白板区

# #+BEGIN_EXPORT html
# <iframe width="100%" height="500px" src="https://awwapp.com/b/u4r84anbireo8/" allowfullscreen></iframe>
# #+END_EXPORT


# ** Reading area
# When we talk about coding we use specific terms (function, data types, boolean, integers etc...).
# It is important that you pronounce those words properly (你的发音提高的话你的听力也会提高，而上课的时候听力至关重要), so visit this reading area as often as you can!
# #+BEGIN_EXPORT html
# <div class="iframe-container">
# <iframe src="https://giphy.com/embed/2S4djnTiypJZK" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
# </div>
# #+END_EXPORT


#  #+REVEAL: split
# Coding with Python is just like learning english, pronunciation is crucially important!

# #+BEGIN_EXPORT html

# <!DOCTYPE html>
#   <head>

#     <script nonce="rjCTJjuEvbJBL74rVobCrA">
# (function(e, p){
#     var m = location.href.match(/platform=(win8|win|mac|linux|cros)/);
#     e.id = (m && m[1]) ||
#            (p.indexOf('Windows NT 6.2') > -1 ? 'win8' : p.indexOf('Windows') > -1 ? 'win' : p.indexOf('Mac') > -1 ? 'mac' : p.indexOf('CrOS') > -1 ? 'cros' : 'linux');
#     e.className = e.className.replace(/\bno-js\b/,'js');
#   })(document.documentElement, window.navigator.userAgent)
#     </script>
#     <meta charset="utf-8">
#     <meta content="initial-scale=1, minimum-scale=1, width=device-width" name="viewport">
#     <meta content=
#     "Google Chrome is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier."
#     name="description">
#     <title>
#       Chrome Browser
#     </title>
#     <link href="https://plus.google.com/100585555255542998765" rel="publisher">
#     <link href="//www.google.com/images/icons/product/chrome-32.png" rel="icon" type="image/ico">
#     <link href="//fonts.googleapis.com/css?family=Open+Sans:300,400,600,700&amp;subset=latin" rel=
#     "stylesheet" nonce="rjCTJjuEvbJBL74rVobCrA">
#     <link href="/intl/en/chrome/assets/common/css/chrome.min.css" rel="stylesheet" nonce="rjCTJjuEvbJBL74rVobCrA">
#     <script src="//www.google.com/js/gweb/analytics/autotrack.js" nonce="rjCTJjuEvbJBL74rVobCrA">
# </script>
#     <script nonce="rjCTJjuEvbJBL74rVobCrA">
# new gweb.analytics.AutoTrack({
#           profile: 'UA-26908291-1'
#         });
#     </script>
#     <style>
# #info {
#     font-size: 20px;
#     }
#     #div_start {
#     float: right;
#     }
#     #headline {
#     text-decoration: none
#     }
#     #results {
#     font-size: 20px;
#     font-weight: bold;
#     border: 1px solid #ddd;
#     padding: 15px;
#     text-align: left;
#     min-height: 150px;
#    text-transform: uppercase;
#     }
#     #start_button {
#     border: 0;
#     background-color:transparent;
#     padding: 0;
#     }
#     .interim {
#     color: gray;
#     }
#     .final {
#     color: black;
#     padding-right: 3px;
#     }
#     .button {
#     display: none;
#     }
#     .marquee {
#     margin: 20px auto;
#     }

#     #buttons {
#     margin: 10px 0;
#     position: relative;
#     top: -50px;
#     }

#     #copy {
#     margin-top: 20px;
#     }

#     #copy > div {
#     display: none;
#     margin: 0 70px;
#     }
#     </style>
#     <style>
# a.c1 {font-weight: normal;}
#     </style>
#   </head>
#   <body class="" id="grid">
#     <div class="browser-landing" id="main">
#       <div class="compact marquee-stacked" id="marquee">
#         <div class="marquee-copy">
#         </div>
#       </div>
#       <div class="compact marquee">
#         <div id="info">
#           <p id="info_start">
#             Click on the microphone icon and begin speaking for as long as you like.
#           </p>
#           <p id="info_speak_now" style="display:none">
#             Go ahead, speak now.
#           </p>
#           <p id="info_no_speech" style="display:none">
#             No speech was detected. You may need to adjust your <a href=
#             "//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">microphone
#             settings</a>.
#           </p>
#           <p id="info_no_microphone" style="display:none">
#             No microphone was found. Ensure that a microphone is installed and that
#             <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
#             microphone settings</a> are configured correctly.
#           </p>
#           <p id="info_allow" style="display:none">
#             Click the "Allow" button above to enable your microphone.
#           </p>
#           <p id="info_denied" style="display:none">
#             Permission to use microphone was denied.
#           </p>
#           <p id="info_blocked" style="display:none">
#             Permission to use microphone is blocked. To change, go to
#             chrome://settings/contentExceptions#media-stream
#           </p>
#           <p id="info_upgrade" style="display:none">
#             Web Speech API is not supported by this browser. Upgrade to <a href=
#             "//www.google.com/chrome">Chrome</a> version 25 or later.
#           </p>
#         </div>
#         <div id="div_start">
#           <button id="start_button" onclick="startButton(event)"><img alt="Start" id="start_img"
#           src="./assets/mic.gif"></button>
#         </div>
#         <div id="results">
#           <span class="final" id="final_span"></span> <span class="interim" id=
#           "interim_span"></span>
#         </div>
#         <div id="copy">
#           <button class="button" id="copy_button" onclick="copyButton()">Copy and Paste</button>
#           <div id="copy_info">
#             <p>
#               Press Control-C to copy text.
#             </p>
#             <p>
#               (Command-C on Mac.)
#             </p>
#           </div><button class="button" id="email_button" onclick="emailButton()">Create
#           Email</button>
#           <div id="email_info">
#             <p>
#               Text sent to default email application.
#             </p>
#             <p>
#               (See chrome://settings/handlers to change.)
#             </p>
#           </div>
#         </div>
#         <div class="compact marquee" id="div_language">
#           <select id="select_language" onchange="updateCountry()">
#             </select>&nbsp;&nbsp; <select id="select_dialect">
#             </select>
#         </div>
#       </div>
#     </div><script src="/intl/en/chrome/assets/common/js/chrome.min.js" nonce="rjCTJjuEvbJBL74rVobCrA">
# </script> <script nonce="rjCTJjuEvbJBL74rVobCrA">
# var chrmMenuBar = new chrm.ui.MenuBar();
#       chrmMenuBar.decorate('nav');
#       var chrmLogo = new chrm.ui.Logo('logo');

#       var chrmscroll = new chrm.ui.SmoothScroll('scroll');
#       chrmscroll.init();



#   window.___gcfg = { lang: 'en' };
#   (function() {
#     var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
#     po.src = 'https://apis.google.com/js/plusone.js';
#     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
#   })();




#       var doubleTracker = new gweb.analytics.DoubleTrack('floodlight', {
#           src: 2542116,
#           type: 'clien612',
#           cat: 'chrom0'
#       });
#       doubleTracker.track();
#       doubleTracker.trackClass('doubletrack', true);
#     </script> <script nonce="rjCTJjuEvbJBL74rVobCrA">
# // If you modify this array, also update default language / dialect below.
# var langs =
#  [['English',       ['en-GB', 'United Kingdom'],
#                      ['en-US', 'United States']],
#  ['Français',        ['fr-FR']],
#  ['中文',             ['cmn-Hans-CN', '普通话 (中国大陆)']]];

# for (var i = 0; i < langs.length; i++) {
#   select_language.options[i] = new Option(langs[i][0], i);
# }
# // Set default language / dialect.
# select_language.selectedIndex = 0;
# updateCountry();
# select_dialect.selectedIndex = 1;
# showInfo('info_start');

# function updateCountry() {
#   for (var i = select_dialect.options.length - 1; i >= 0; i--) {
#     select_dialect.remove(i);
#   }
#   var list = langs[select_language.selectedIndex];
#   for (var i = 1; i < list.length; i++) {
#     select_dialect.options.add(new Option(list[i][1], list[i][0]));
#   }
#   select_dialect.style.visibility = list[1].length == 1 ? 'hidden' : 'visible';
# }

# var create_email = false;
# var final_transcript = '';
# var recognizing = false;
# var ignore_onend;
# var start_timestamp;
# if (!('webkitSpeechRecognition' in window)) {
#   upgrade();
# } else {
#   start_button.style.display = 'inline-block';
#   var recognition = new webkitSpeechRecognition();
#   recognition.continuous = true;
#   recognition.interimResults = true;

#   recognition.onstart = function() {
#     recognizing = true;
#     showInfo('info_speak_now');
#     start_img.src = './assets/mic-animate.gif';
#   };

#   recognition.onerror = function(event) {
#     if (event.error == 'no-speech') {
#       start_img.src = './assets/mic.gif';
#       showInfo('info_no_speech');
#       ignore_onend = true;
#     }
#     if (event.error == 'audio-capture') {
#       start_img.src = './assets/mic.gif';
#       showInfo('info_no_microphone');
#       ignore_onend = true;
#     }
#     if (event.error == 'not-allowed') {
#       if (event.timeStamp - start_timestamp < 100) {
#         showInfo('info_blocked');
#       } else {
#         showInfo('info_denied');
#       }
#       ignore_onend = true;
#     }
#   };

#   recognition.onend = function() {
#     recognizing = false;
#     if (ignore_onend) {
#       return;
#     }
#     start_img.src = '/assets/mic.gif';
#     if (!final_transcript) {
#       showInfo('info_start');
#       return;
#     }
#     showInfo('');
#     if (window.getSelection) {
#       window.getSelection().removeAllRanges();
#       var range = document.createRange();
#       range.selectNode(document.getElementById('final_span'));
#       window.getSelection().addRange(range);
#     }
#     if (create_email) {
#       create_email = false;
#       createEmail();
#     }
#   };

#   recognition.onresult = function(event) {
#     var interim_transcript = '';
#     if (typeof(event.results) == 'undefined') {
#       recognition.onend = null;
#       recognition.stop();
#       upgrade();
#       return;
#     }
#     for (var i = event.resultIndex; i < event.results.length; ++i) {
#       if (event.results[i].isFinal) {
#         final_transcript += event.results[i][0].transcript;
#       } else {
#         interim_transcript += event.results[i][0].transcript;
#       }
#     }
#     final_transcript = capitalize(final_transcript);
#     final_span.innerHTML = linebreak(final_transcript);
#     interim_span.innerHTML = linebreak(interim_transcript);
#     if (final_transcript || interim_transcript) {
#       showButtons('inline-block');
#     }
#   };
# }

# function upgrade() {
#   start_button.style.visibility = 'hidden';
#   showInfo('info_upgrade');
# }

# var two_line = /\n\n/g;
# var one_line = /\n/g;
# function linebreak(s) {
#   return s.replace(two_line, '<p></p>').replace(one_line, '<br>');
# }

# var first_char = /\S/;
# function capitalize(s) {
#   return s.replace(first_char, function(m) { return m.toUpperCase(); });
# }

# function createEmail() {
#   var n = final_transcript.indexOf('\n');
#   if (n < 0 || n >= 80) {
#     n = 40 + final_transcript.substring(40).indexOf(' ');
#   }
#   var subject = encodeURI(final_transcript.substring(0, n));
#   var body = encodeURI(final_transcript.substring(n + 1));
#   window.location.href = 'mailto:?subject=' + subject + '&body=' + body;
# }

# function copyButton() {
#   if (recognizing) {
#     recognizing = false;
#     recognition.stop();
#   }
#   copy_button.style.display = 'none';
#   copy_info.style.display = 'inline-block';
#   showInfo('');
# }

# function emailButton() {
#   if (recognizing) {
#     create_email = true;
#     recognizing = false;
#     recognition.stop();
#   } else {
#     createEmail();
#   }
#   email_button.style.display = 'none';
#   email_info.style.display = 'inline-block';
#   showInfo('');
# }

# function startButton(event) {
#   if (recognizing) {
#     recognition.stop();
#     return;
#   }
#   final_transcript = '';
#   recognition.lang = select_dialect.value;
#   recognition.start();
#   ignore_onend = false;
#   final_span.innerHTML = '';
#   interim_span.innerHTML = '';
#   start_img.src = './assets/mic-slash.gif';
#   showInfo('info_allow');
#   showButtons('none');
#   start_timestamp = event.timeStamp;
# }

# function showInfo(s) {
#   if (s) {
#     for (var child = info.firstChild; child; child = child.nextSibling) {
#       if (child.style) {
#         child.style.display = child.id == s ? 'inline' : 'none';
#       }
#     }
#     info.style.visibility = 'visible';
#   } else {
#     info.style.visibility = 'hidden';
#   }
# }

# var current_style;
# function showButtons(style) {
#   if (style == current_style) {
#     return;
#   }
#   current_style = style;
#   copy_button.style.display = style;
#   email_button.style.display = style;
#   copy_info.style.display = 'none';
#   email_info.style.display = 'none';
# }
#     </script>
#   </body>


# #+END_EXPORT

# ** Chit-chat 聊天区
# You want to chat with Python? Do it here!
# #+BEGIN_EXPORT html
# <iframe src="https://trinket.io/embed/console/13c197b5a3" width="100%" height="200" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
# #+END_EXPORT

# ** Writing Letter
# If you want to write letter to python here!
# #+BEGIN_EXPORT html

# <iframe src="https://trinket.io/embed/python3/5c78a83738" width="100%" height="356" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>

# #+END_EXPORT

# * blocklyDuck
# [[~/rachel/blocklyDuck.png]]
# * Maze
# ** Maze1
# [[~/rachel/Maze1.png]]

# ** Maze2
# [[~/rachel/Maze2.png]]

# ** Maze3
# [[~/rachel/Maze3.png]]

# ** Maze4
# [[~/rachel/Maze4.png]]

# ** Maze6
# [[~/rachel/Maze6.png]]

# ** Maze7
# [[~/rachel/Maze7.png]]

# ** Maze8
# [[~/rachel/Maze8.png]]

# ** Maze9
# [[~/rachel/Maze9.png]]

# ** MazeChinese
# [[~/rachel/MazeChinese.png]]
# ** Maze10
# [[~/rachel/Maze10.png]]

# * Bird
# ** Bird1
# [[~/rachel/Bird1.png]]

# ** Bird2
# [[~/rachel/Bird2.png]]

# ** Bird3
# [[~/rachel/Bird3.png]]

# ** Bird4
# [[~/rachel/Bird4.png]]

# ** Bird5
# [[~/rachel/Bird5.png]]

# ** Bird6
# [[~/rachel/Bird6.png]]

# ** Bird7
# [[~/rachel/Bird7.png]]

# ** Bird8
# [[~/rachel/Bird8.png]]

# ** Bird9
# [[~/rachel/Bird9.png]]

# ** Bird10
# [[~/rachel/Bird10.png]]

# ** Bird
# [[~/rachel/Bird.png]]

# * Turtle
# ** Turtle1
# [[~/rachel/Turtle1.png]]

# ** Turtle2
# [[~/rachel/Turtle2.png]]

# ** Turtle3
# [[~/rachel/Turtle3.png]]

# ** Turtle4
# [[~/rachel/Turtle4.png]]

# ** Turtle5
# [[~/rachel/Turtle5.png]]

# ** Turtle6
# [[~/rachel/Turtle6.png]]

# ** Turtle7
# [[~/rachel/Turtle7.png]]

# ** Turtle8
# [[~/rachel/Turtle8.png]]

# * Music
# ** Music1kk
# [[~/rachel/Music1kk.png]]

# ** Music2
# [[~/rachel/Music2.png]]

# ** Music3
# [[~/rachel/Music3.png]]

# ** Music4
# [[~/rachel/Music4.png]]

# ** Music7
# [[~/rachel/Music7.png]]

# ** Music9
# [[~/rachel/Music9.png]]
# * Pond Tutor
# ** PondTutor1
# [[~/rachel/PondTutor1.png]]

# ** PondTutor2
# [[~/rachel/PondTutor2.png]]

# ** PondTutor3
# [[~/rachel/PondTutor3.png]]

# ** PondTutor4
# [[~/rachel/PondTutor4.png]]

# ** PondTutor5
# [[~/rachel/PondTutor5.png]]

# ** PondTutor6
# [[~/rachel/PondTutor6.png]]

# ** PondTutor7
# [[~/rachel/PondTutor7.png]]

# ** PondTutor9
# [[~/rachel/PondTutor9.png]]
# * Flowcharts

# * Break it down
# - let's ask our robot to feed the chickens:
#   1) get ready to go outside
#   2) collect grain
#   3) feed chicken

#     Definition: An algorithm is a set of instructions designed to complete a task.
# * Build up your own algorithm
# Your robot fell on the floor and it is now broken into pieces.
# We need to put it back together. Here is a set of instructions to put the robot back:
# 1) Fix the head on the body
# 2) Add 2 arms
# 3) Ass two legs
# ** Be precise!
# 1) fix the head to the top of the body
# 2) add one arm to the left of the body
# 3) add one arm to the right of the body
# 4) add one leg to the right of the body
# 5) add one leg to the left of the body
# ** Wake up and get ready to school
# Below we have flowcharts that show sequences of instructions (a.k.a algorithms).
# Look at those algos and see if you can find some problems/bugs.
# Let's debug!


# #+BEGIN_SRC plantuml :results output
# !define DARKBLUE
# !includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
# : wake up;
# : get out of bed;
# : have breakfast;
# : wash face;
# : leave house;
# : walk to school;
# #+END_SRC
# #+RESULTS:
# [[file:/tmp/babel-N0b5Gu/plantuml-ewHqgs.png]]



# #+BEGIN_SRC plantuml :results output
# !define DARKBLUE
# !includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
# start
# : wake up;
# : get out of bed;
# : have breakfast;
# : wash face;
# : leave house;
# : walk to school;
# stop
# #+END_SRC

# #+RESULTS:
# [[file:/tmp/babel-N0b5Gu/plantuml-rZZ1rg.png]]


# <s
# ** Out of order
# kkk


# #+BEGIN_SRC plantuml :results output
# !define DARKBLUE
# !includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
# start
# : have breakfast;
# : wake up;
# : have breakfast;
# : get out of bed;
# : have breakfast;
# : wash face;
# : leave house;
# : walk to school;
# stop
# #+END_SRC
# #+RESULTS:
# [[file:/tmp/babel-N0b5Gu/plantuml-ipYF9J.png]]




# * Feeling loopy
# We know that with a well designed sequence of instructions we can ask our robot to help us feed our chickens, among other things.
# We know our instructions should be clear and bug-free.
# But what if we want our robot to REPEAT an sequence of instructions many times? ex:
# ** The horse that runs one lap
# #+BEGIN_SRC python
# def run_one_lap():
#     pass

# run_one_lap()

# #+END_SRC
# #+BEGIN_SRC python
# for step in range(3):
#     run_one_lap()
# #+END_SRC
# #+BEGIN_SRC python
# while 2 > 1:
#     run_one_lap()
# #+END_SRC


# #+BEGIN_SRC plantuml :results output
# !define DARKBLUE
# !includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
# start
# repeat
#   : run_one_lap();
# repeat while (Not tired yet?)  is (yes)
# ->no;
# stop
# #+END_SRC

# #+RESULTS:
# [[file:/tmp/babel-N0b5Gu/plantuml-mJaesH.png]]

# ** The panda that buttons his jacket
# #+BEGIN_SRC python
# def button_up()
#     pass
# button_up()
# #+END_SRC

# #+BEGIN_SRC python
# for step in range(3):
#     button_up()

# #+END_SRC





# ** The rabbits that eats his plate
# #+BEGIN_SRC python
# def take_a_bite():
#     pass

# take_a_bite()
# #+END_SRC


# #+BEGIN_SRC plantuml
# !define DARKBLUE
# !includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
# start

# while ( 3 >2 )
#   : horse runs a lap;
#   : eats a carrot ;
# endwhile

# stop
# #+END_SRC
# #+RESULTS:
# [[file:/tmp/babel-N0b5Gu/plantuml-76my5J.png]]


# #+BEGIN_SRC plantuml
# start

# while ( for step in range(3) )
#   : horse runs a lap;
#   : eats a carrot ;
# endwhile

# stop
# #+END_SRC

# #+RESULTS:
# [[file:/tmp/babel-N0b5Gu/plantuml-j5FY8r.png]]

* functions definitions

Let's define the verb to_burpee as follows:
    1) stand like a soldier
    2) hit you stomack and brace your abs
    3) do the plank
    4) bring feets between your hands & jump

** Is this python code ok?
#+BEGIN_SRC python
def to_burpee():
    to_plank()
    to_stand()
    to_brace()
    to_plank()
    to_jump()
#+END_SRC
** Is this python code better?
#+BEGIN_SRC python
def to_burpee():
    to_stand()
    to_brace()
    to_plank()
    to_jump()
#+END_SRC
** Let's improve it even more!

#+BEGIN_SRC python
def to_stand():
    pass

def to_brace():
    pass

def to_plank():
    pass

def to_jump():
    pass

def to_burpee():
    to_stand()
    to_brace()
    to_plank()
    to_jump()

    #+END_SRC

* games with functions
* Be lazy and stay DRY!

We don't want you to be lazy, but you should not waste time and resources writing the same instructions again and again.
Let's look at the following blocks below. Can you see that some of them are almost identical?

** Look below, that's not very DRY!
------------------------------------------------
Let us teach you how to prepare a banana sandwich.
First you should prepare the following:
- a knife
- a jar of peanut butter
- a jar of banana jelly
OK, let's start:
1- Take a slice of bread
2- Put peanut butter on that slice
3- Take a second slice of bread
4- Put banana on that slice

------------------------------------------------
Let us teach you how to prepare a strawberry sandwich.
First you should prepare the following:
- a knife
- a jar of peanut butter
- a jar of strawberry jelly
OK, let's start:
1- Take a slice of bread
2- Put peanut butter on that slice
3- Take a second slice of bread
4- Put strawberry on that slice

------------------------------------------------
My dear robot,
Let me explain what you should do whenever you want to take the taxi to Big-C:
- hail a taxi
- tell him you want to go to Big-C
- agree about the price
- sit in the car and let yourself drive
- pay the agreed amount
- get out of the car, you are in Big-C

------------------------------------------------
Let us teach you how to prepare a orange sandwich.
First you should prepare the following:
- a knife
- a jar of peanut butter
- a jar of orange jelly
OK, let's start:
1- Take a slice of bread
2- Put peanut butter on that slice
3- Take a second slice of bread
4- Put orange on that slice

------------------------------------------------
My dear robot,
Let me explain what you should do whenever you want to take the taxi to Central Festival:
- hail a taxi
- tell him you want to go to Central Festival
- agree about the price
- sit in the car and let yourself drive
- pay the agreed amount
- get out of the car, you are in Central Festival

------------------------------------------------

My dear robot,
Let me explain what you should do whenever you want to take the taxi to school:
- hail a taxi
- tell him you want to go to school
- agree about the price
- sit in the car and let yourself drive
- pay the agreed amount
- get out of the car, you are in school

------------------------------------------------
Let us teach you how to prepare a nutella sandwich.
First you should prepare the following:
- a knife
- a jar of peanut butter
- a jar of nutella jelly
OK, let's start:
1- Take a slice of bread
2- Put peanut butter on that slice
3- Take a second slice of bread
4- Put nutella on that slice
** Let's get DRY!
------------------------------------------------
Let us teach you how to prepare a NameOfTheFruitYouWantHere sandwich.
First you should prepare the following:
- a knife
- a jar of peanut butter
- a jar of NameOfTheFruitYouWantHere jelly
OK, let's start:
1- Take a slice of bread
2- Put peanut butter on that slice
3- Take a second slice of bread
4- Put NameOfTheFruitYouWantHere on that slice


------------------------------------------------
 My dear robot,
 Let me explain what you should do whenever you want to take the taxi to YourDestinationHere:
- hail a taxi
- tell him you want to go to YourDestinationHere
- agree about the price
- sit in the car and let yourself drive
- pay the agreed amount
- get out of the car, you are in YourDestinationHere
* Find bugs!
1)
   #+BEGIN_SRC python
#1 matching quotations
print("bob')
#2 matching parens
best_friend = 'bob'
print(best_friend
#3 matching everything
best_friend = 'bob'
print('bob
#4 consistent variables names

my_best_friend_now_is = 'matoom'
my_best_friend_now_is = 'jasmine'
print(my_best_friend-now-is)
#5 for loop. debug then execute!
for step in range(3):
    print('I love jumping!)
#6 for loop (debug then execute)
for step in range(5):
    jasmine.burpee()
    matoom.burpee()
#6 while loop: avoid infinite iteration
while 3 > 2:
    jasmine.burpee()

#7 while loop: avoid infinite iteration
while True:
    matoom.run()
#8 while loop: debug and explain
laurent.energy = 10
while True:
    laurent.burpee(
    laurent.run_lap()
    laurent.energy -= 1
    if laurent.energy <6 :::
        break

#9 define function
def say_hi_in_french():
    print("bonjour)

#10
deFINE say_hi_in_german():
    print("guten tag")

#11
def say_hi_in_korean()
print("Anyonghaseyo")

#12
definition say_hi_in_spanish  :
    print("hola")

   #+END_SRC
** Counters: variables with constant incrementation
#+BEGIN_SRC python
counter = 0
counter += 1  #add 1 to counter, i.e. increment by 1
print(counter) ---> 1
counter += 1 #add 1 to counter, i.e. increment by 1
print(counter) ---> 2

laurent.energy = 10
laurent.run_one_lap()
laurent.burpee(3)
laurent.energy -= 1 # deduct 1 to laurent.energy

#+END_SRC
*** games
Pick the code you like most :)
#+BEGIN_SRC
matoom.points = 0
print(matoom.points)
for step in range(3):
    matoom.run_lap()
    matoom.burpee()
    matoom.points += 1

matoom.points = 0
print(matoom.points)
for step in range(3):
    matoom.run_lap()
    matoom.burpee()
    matoom.points += 1

#+END_SRC

#+BEGIN_SRC
jasmine.points =
print(matoom.points)
for step in range(4):
    jasmine.run_lap()
    jasmine.burpee()
    jasmine.points += 1

jasmine.points = 0
print(matoom.points)
for step in range(3):
    matoom.run_lap()
    matoom.burpee()
    matoom.points += 1

#+END_SRC
#+BEGIN_SRC python
for item in  fp
#+END_SRC

#+BEGIN_SRC python :results output
from time import sleep
for step in range(4):
    print(step)
    sleep(1)

#+END_SRC

#+RESULTS:
: 0
: 1
: 2
: 3
